
1 为什么要以及如何解耦UI界面以及UI逻辑（更高层次抽象，解耦视图以及视图逻辑）

Why? 视图不稳定，容易变化，举例UI制作人员修改UI元素属性（颜色，动画，blabla），UI布局等等，这些都与UI的处理逻辑是无关的，如按钮事件保持不变。按照“不稳定的代码都要隔离开”的编程原则，要把这两块代码放在不同的地方。

How? 可以引入一个View接口代表视图，一个Meidator接口来处理视图输入，委托视图事件和通知视图，因为这是一个中间者的概念，所以这部分的代码应该是很少的。用英文来说就是thin。

2 为什么要以及如何解耦视图逻辑以及业务逻辑

Why? 个人看来，本项目就严重存在这种问题。（视图逻辑以及UI逻辑都写在puremvc的mediator里）。然而两者职责不同，根据SPR，应该是要严格区分的。业务逻辑是一个软件的核心，不应该跟任何其他模块耦合在一起。

How？在puremvc里，有个叫Controller的概念，可以用来存放业务逻辑，另外需要抽象出业务逻辑的接口。说到这里，就不得不接着说多层模型，MVC，到此为此，我们还需要把模型抽象出来。

3 多层模型中各个模块如何通信？

最解耦的方法是用事件，不过这样会导致代码写起来比较麻烦，而且可能会比较难调试。通信是个人认为最难的部分，需要项目成员创立项目的时候好好协商，定好约定。

4 unity3d有什么坑

unity3d引擎是组件化设计，这是一个很好的设计思路，可以很快的设计出游戏，但是不适用于大游戏，大游戏需要引入MVC，要和MVC结合的话是有难度的。

5 常用设计模式
state（FSM）
command
factory
observer event
service locator

6 abstrac class vs interface
接口是一种契约（contract），不能含有数据和函数体，支持多继承。
抽象类是类，只支持单一继承，可以含有和数据和函数实现。

抽象类和实现类是强耦合，而接口不是，只能说是实现类遵守接口契约。
个人之见，写模块时候，先抽象出抽象类，等模块稳定性足够强的时候再抽象出接口，因为直接实现接口具有不稳定性。比较复杂的设计一般都要有抽象类和接口。对外提供的API用接口。

7 向量 叉乘，点乘，归一化的意义
叉乘（向量积）可以用来求一个面的法向量，叉乘得出一个新向量，垂直于原先的两个向量，并且模等于原先两个的模的乘积
点乘（数量积）可以判断两个向量的方向，如果两个法向量点乘，大于1，同方向，小于1，反向，等于0，垂直，公式|a||b|cos夹角

8 NGUI下分辨率适配
四个锚点，底图拉伸。设备大小边比/标准大小边比  or   1

9 光照
3D渲染中，物体表面的光照计算公式为：
I = 环境光(Iambient) + 漫反射光(Idiffuse) + 镜面高光(Ispecular);
实际光照强度 I= 环境光(Iambient) + 漫反射光(Idiffuse) + 镜面高光(Ispecular);

环境光：Iambient= Aintensity* Acolor; (Aintensity表示环境光强度，Acolor表示环境光颜色)

漫反射光：Idiffuse = Dintensity*Dcolor*N.L;

(Dintensity表示漫反射强度，Dcolor表示漫反射光颜色，N为该点的法向量，L为光源向量)

镜面反射光：Ispecular = Sintensity*Scolor*(R.V)^n;

(Sintensity表示镜面光照强度，Scolor表示镜面光颜色，R为光的反射向量，V为观察者向量，n称为镜面光指数)
将一些值合并，并使用白色作为光照颜色，则上述公式可简化为：
I = A + D*N.L + (R.V)n